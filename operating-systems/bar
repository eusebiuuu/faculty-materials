Tema 1
Autor: RÃ®mboi Eusebiu
Grupa: 232

1) Explicati de ce nu merge urmatoarea atribuire multipla: d2+d4 ->d6<-d1.
Atribuire nu este corecta, deoarece relatia este convertita in (d6 <- d2 + d4) <- d1 care nu se poate realiza din cauza faptului ca in R nu se pot realiza atribuire multiple asupra aceluiasi obiect.

2) Explicati rolul parantezelor si al operatorului `:` in situatiile de mai jos.
Operatorul `:` are prioritate mai mare decat operatiile algebrice, insa prioritate mai mica fata de paranteze.

3) Explicati comportamentul operatorului `:` in 1.4:5.
In acest caz, operatorul `:` creeaza o secventa a carui prim termen este 1.4 iar fiecare element ulterior este obtinut din precedentul la care se adauga, implicit, 1, secventa terminandu-se cu cel mai mare element <= 5.

4) Explicati urmatoarea secventa de cod: (b <- c(rep(rep(c(0,2),3),1:6),rep(rep(c(0:3,6),c(2,4:7)),24)))
Rezultatul se obtine din concatenarea a 2 secvente: prima reprezinta rep(0 2 0 2 0 2, 1 2 3 4 5 6) adica secventa obtinuta repetand elementul de pe pozitia i in primul vector de un numar de ori egal cu elementul de pe pozitia i din al doilea vector, iar a doua secventa este reprezentata de rep(0 0 1 1 1 1 2 2 2 2 2 3 3 3 3 3 3 6 6 6 6 6 6 6, 24) adica repetare secventei determinate de primul vector de 24 de ori.

5) Explicati urmatoarea secventa de cod: `x <- sample(1:1000,100); x[x%%8==0][1:3]`
Secventa atribuie obiectului x un set de date (pseudo)random cu 100 de numere de la 1 la 1000 si afiseaza primele 3 numere divizibile cu 8 din x.

6) Explicati ce face urmatoarea comanda: `c1 <- a1+b`
Comanda realizeaza atribuirea lui c1 a vectorului obtinut din adunarea elementelor de pe aceleasi pozitii din vectorii a1 si b, iar in cazul in care au lungimi diferite, din simpla atribuire a elementelor ramase neadunate corespunzatoare vectorului cu lungimea mai mare.

7) De ce vector_mixt este in continuare un vector si nu o lista?
Deoarece tipurile integer s-au convertit implicit la tipul character.

8) Ce este in neregula cu expresia de mai sus?
Vectorul x are mai putin de 50 de pozitii.

9) Cum putem elimina in mod automat valorile NA dintr-un vector?
Folosind comanda: `z <- y[!is.na(y)]`

10) Creati un vector logic t ce compara daca elementul de pe pozitia i (impara) este mai mic decat elementul de pe pozitia para imediat urmatoare.
n <- sample(1:100, 1)
n <- 2 * n
z <- sample(1:1000, n)
t <- z[seq(1, n, 2)] < z[seq(2, n, 2)]

11) Determinati pozitiile pentru care conditia de la prima intrebare este adevarata.
which(t == TRUE)

12) Determinati cate numere cuprinse intre 411 si 7870 sunt divizibile cu 9 dar nu cu 5.
res <- seq(411, 7870, 1)
length(res[res %% 9 == 0 & res %% 5 != 0])

13) Construiti doi vectori x si y cu 1000 de elemente fiecare, extrase in mod aleator din multimea cu numere intregi -24500:76000.
x <- sample(-24500:76000, 1000, replace = TRUE)
y <- sample(-24500:76000, 1000, replace = TRUE)

a) Stabiliti care dintre cei doi vectori are mai multe elemente, luate in valoare absoluta, mai mari decat valoarea absoluta a elementului corespondent din celalalt vector.
cnt1 <- length(x[abs(x) > abs(y)])
cnt2 <- length(y[abs(x) < abs(y)])
if (cnt1 > cnt2) {
  ("X")
} else if (cnt1 < cnt2) {
  ("Y")
} else {
  ("Au acelasi numar de elemente")
}

b) Stabiliti care dintre cei doi vectori are minimul pe o pozitie mai mare.
mins_x <- which(x == min(x))
mins_y <- which(y == min(y))
pos_x <- mins_x[length(mins_x)]
pos_y <- mins_y[length(mins_y)]
if (pos_x > pos_y) {
  ("X")
} else if (pos_x < pos_y) {
  ("Y")
} else {
  ("Au cele mai mari pozitii a minimelor egale")
}

c) Stabiliti care dintre cei doi vectori are cele mai multe valori care se repeta.
freq_x <- sum(table(x) > 1)
freq_y <- sum(table(y) > 1)
if (freq_x > freq_y) {
  ("X")
} else if (freq_x < freq_y) {
  ("Y")
} else {
  ("Au acelasi numar de valori care se repeta")
}

d) Stabiliti care dintre cei doi vectori are o secventa de cel putin 2 valori consecutive.
consec_x <- any(diff(x) == 1)
consec_y <- any(diff(y) == 1)
if (consec_x) {
  ("X are")
} else {
  ("X nu are")
}
if (consec_y) {
  ("Y are")
} else {
  ("Y nu are")
}

e) Stabiliti care dintre cei doi vectori are mai multe valori divizibile cu corespondentele lor din celalalt vector.
cnt1 <- length(x[abs(x) %% abs(y) == 0])
cnt2 <- length(y[abs(y) %% abs(x) == 0])
if (cnt1 > cnt2) {
  ("X")
} else if (cnt1 < cnt2) {
  ("Y")
} else {
  ("Au acelasi numar de elemente divizibile cu corespondentele lor")
}






